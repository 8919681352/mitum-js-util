/*
    mitum-js-util SDK for mitum-currency and mitum-data-blocksign
    Copyright (C) 2022 ProtoconNet

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* SDK module */
const { OperationGenerator } = require('../base');

const { BlockSignItem, BLOCKSIGN_CREATE_DOCUMENTS, BLOCKSIGN_SIGN_DOCUMENTS } = require('./base');

const { MBS_CREATE_DOCUMENTS_SINGLE_FILE, MBS_SIGN_ITEM_SINGLE_DOCUMENT, MBS_CREATE_DOCUMENTS_OP_FACT, MBS_SIGN_DOCUMENTS_OP_FACT } = require('../hint');
const { CreateDocumentsItem, SignDocumentsItem } = require('./item');
const { BlockSignFact } = require('./fact');


/**
 * @class
 * @extends OperationGenerator
 * BlockSignGenerator helps to generate data and json files to send to mitum-blocksign network.
 * Before you use methods of Generator, network id should be set, first.
 * @property {string} id
 */
class BlockSignGenerator extends OperationGenerator {

    /**
     * Returns CreateDocumentsItem by file hash, document id, sign code, title, size, currency id, signers and sign codes.
     * @param {string} fileHash File hash 
     * @param {number} did Document ID
     * @param {string} signcode Sign code
     * @param {string} title Title
     * @param {number} size File size
     * @param {string} cid Currency ID
     * @param {object} signers List of signers with type suffix (mca)
     * @param {object} signcodes List of sign codes
     * @returns {CreateDocumentsItem} CreateDocumentsItem
     */
    createCreateDocumentsItem(fileHash, did, signcode, title, size, cid, signers, signcodes) {
        return new CreateDocumentsItem(
            MBS_CREATE_DOCUMENTS_SINGLE_FILE,
            fileHash,
            did,
            signcode,
            title,
            size,
            cid,
            signers,
            signcodes
        )
    }

    /**
     * Returns SignDocumentsItem by owner, document id, currency id.
     * @param {string} owner Owner address with type suffix (mca)
     * @param {number} did Document ID
     * @param {string} cid Currency ID
     * @returns {SignDocumentsItem} SignDocumentsItem
     */
    createSignDocumentsItem(owner, did, cid) {
        return new SignDocumentsItem(
            MBS_SIGN_ITEM_SINGLE_DOCUMENT,
            owner,
            did,
            cid
        )
    }

    /**
     * Returns BlockSignFact by operation type, sender and BlockSignItems.
     * @param {string} type Operation type - [ BLOCKSIGN_CREATE_DOCUMENTS | BLOCKSIGN_SIGN_DOCUMENTS | BLOCKSIGN_TRANSFER_DOCUMENTS ] which are constant variable of Generator
     * @param {string} sender Sender address with type suffix (mca)
     * @param {BlockSignItem} items BlockSignItem - [CreateDocumentsItem | SignDocumentsItem | TransferDocumentsItem ] generated by Generator
     * @returns {BlockSignFact} BlockSignFact
     */
    createBlockSignFact(type, sender, items) {
        let _type;
        switch (type) {
            case BLOCKSIGN_CREATE_DOCUMENTS:
                _type = MBS_CREATE_DOCUMENTS_OP_FACT;
                break;
            case BLOCKSIGN_SIGN_DOCUMENTS:
                _type = MBS_SIGN_DOCUMENTS_OP_FACT;
                break;
            default:
                throw '[ERROR] Invalid block-sign fact type';
        }

        return new BlockSignFact(
            _type,
            sender,
            items
        )
    }
};


module.exports = {
    BlockSignGenerator,
};