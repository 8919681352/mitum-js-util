/*
    mitum-js-util SDK for mitum-currency and mitum-data-blocksign
    Copyright (C) 2022 ProtoconNet

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* SDK module */
const { getTimeStamp, dateToUTC, sum256, _hint } = require('../util');

const { CurrencyGenerator, CreateAccountsFact, KeyUpdaterFact, TransfersFact } = require('../operation/currency');
const { BlockSignGenerator, BlockSignFact } = require('../operation/blocksign');
const { BlockCityGenerator, BlockCityFact } = require('../operation/blockcity');

const { MC_CREATE_ACCOUNTS_OP, MC_KEYUPDATER_OP, MC_TRANSFERS_OP, MBS_CREATE_DOCUMENTS_OP, MBS_CREATE_DOCUMENTS_OP_FACT, 
    MBS_SIGN_DOCUMENTS_OP, MBS_SIGN_DOCUMENTS_OP_FACT, SEAL, MBC_CREATE_DOCUMENTS_OP_FACT, MBC_CREATE_DOCUMENTS_OP, MBC_UPDATE_DOCUMENTS_OP_FACT, MBC_UPDATE_DOCUMENTS_OP } = require('../hint');

const { Operation, OperationFact } = require('../operation');
const { getKeypairFromPrivateKey } = require('../key');

/* base58 package */
const bs58 = require('bs58');
const { BlockCityGenerator } = require('../operation/blockcity/generator');


/**
 * @class
 * Generator helps to generate data and json files to send to mitum-currency and mitum-blocksign network.
 * Before you use methods of Generator, network id should be set, first.
 * @property {string} id
 * @property {CurrencyGenerator} currency
 * @property {BlockSignGenerator} blockSign
 */
class Generator {

    /**
     * Generator instance with network id.
     * @param {string} id Network ID 
     */
    constructor(id) {
        this.id = id;
        this.currency = new CurrencyGenerator(id);
        this.blockSign = new BlockSignGenerator(id);
        this.blockCity = new BlockCityGenerator(id);
    }

    /**
     * Sets new network ID.
     * @param {string} id New network ID
     */
    setId(id) {
        this.id = id;
        this.currency = new CurrencyGenerator(id);
        this.blockSign = new BlockSignGenerator(id);
        this.blockCity = new BlockCityGenerator(id);
    }

    /**
     * Returns Operation by fact and memo.
     * Memo can be empty.
     * @param {OperationFact} fact OperationFact generated by Generator.
     * @param {string} memo Memo
     * @returns {Operation} Operation
     */
    createOperation(fact, memo) {
        let _type;

        if (fact instanceof CreateAccountsFact) {
            _type = MC_CREATE_ACCOUNTS_OP;
        }
        else if (fact instanceof KeyUpdaterFact) {
            _type = MC_KEYUPDATER_OP;
        }
        else if (fact instanceof TransfersFact) {
            _type = MC_TRANSFERS_OP;
        }
        else if (fact instanceof BlockSignFact) {
            switch (fact.type) {
                case MBS_CREATE_DOCUMENTS_OP_FACT:
                    _type = MBS_CREATE_DOCUMENTS_OP;
                    break;
                case MBS_SIGN_DOCUMENTS_OP_FACT:
                    _type = MBS_SIGN_DOCUMENTS_OP;
                    break;
                default:
                    throw 'Invalid fact object';
            }
        }
        else if (fact instanceof BlockCityFact) {
            switch (fact.type) {
                case MBC_CREATE_DOCUMENTS_OP_FACT:
                    _type = MBC_CREATE_DOCUMENTS_OP;
                    break;
                case MBC_UPDATE_DOCUMENTS_OP_FACT:
                    _type = MBC_UPDATE_DOCUMENTS_OP;
                default:
                    throw 'Invalid fact object';
            }
        }
        else {
            throw 'Invalid fact object';
        }

        return new Operation(
            this.id, _type, memo, fact
        );
    };

    /**
     * Returns seal dictionary object by signing key and operations.
     * @param {string} sk Signing private key with type suffix (mpr)
     * @param {object} operations List of Operations generated by Generator.createOperation
     * @returns {object} Seal dictionary type object
     */
    createSeal(sk, operations) {
        const keypair = getKeypairFromPrivateKey(sk);
        const signedAt = getTimeStamp();
        const bSignedAt = Buffer.from(dateToUTC(signedAt));
        const bSigner = Buffer.from(keypair.getPublicKey());

        let bOperations = Buffer.from('');
        for (var i = 0; i < operations.length; i++) {
            bOperations = Buffer.concat([bOperations, operations[i].hash]);
        }

        const bodyHash = sum256(
            Buffer.concat([bSigner, bSignedAt, bOperations]));

        const signature = keypair.sign(
            Buffer.concat(
                [bodyHash, Buffer.from(this.id)]
            )
        );

        const hash = sum256(
            Buffer.concat([bodyHash, signature])
        );

        const seal = {};
        seal._hint = _hint(SEAL);
        seal.hash = bs58.encode(hash);
        seal.body_hash = bs58.encode(bodyHash);
        seal.signer = keypair.getPublicKey();
        seal.signature = bs58.encode(signature);
        seal.signed_at = signedAt.toISOString();

        const _operations = [];
        for (var i = 0; i < operations.length; i++) {
            _operations.push(operations[i].dict());
        }
        seal.operations = _operations;

        return seal;
    };
};


module.exports = {
    Generator,
};