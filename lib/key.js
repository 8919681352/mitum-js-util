/*
    mitum-js-util SDK for mitum-currency and mitum-data-blocksign
    Copyright (C) 2021 ProtoconNet

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* SDK module */
const Util = require('./util');
const Hint = require('./hint');

/* base58 package */
const bs58 = require('bs58');
const bs58check = require('bs58check');

/* crypto package */
const ecCrypto = require('eccrypto-js');
const elliptic = require('elliptic');
const ec = new elliptic.ec('secp256k1');

const compare = (x, y) => {
    return Buffer.compare(x.key._buffer(), y.key._buffer());
}


class BaseKey {

    constructor(key, type) {
        if (type == 'unknown') {
            const parsed = Util.parseTyped(key);
            this.type = parsed.type;
            this.key = parsed.raw;
        }
        else {
            this.type = type;
            this.key = key;
        }
    }

    typed() {
        return this.key + this.type;
    }

    buffer() {
        return Buffer.from(this.typed());
    }

    _buffer() {
        return Buffer.from(this.key);
    }
};


class Key {

    constructor(key, w) {
        this.hint = Util._hint(Hint.MC_KEY);
        this.key = new BaseKey(key, 'unknown');
        this.weight = new Util.BigInteger(w.toString());
    }

    buffer() {
        return Buffer.concat(
            [this.key.buffer(), this.weight.buffer()]
        );
    }

    dict() {
        const key = {};
        key._hint = this.hint;
        key.weight = this.weight.value;
        key.key = this.key.typed();
        return key;
    }
};


class Keys {

    constructor(keys, threshold) {
        this.hint = Util._hint(Hint.MC_KEYS);
        this.keys = keys;
        this.threshold = new Util.BigInteger(threshold.toString());
        this.hash = this._generateHash();
    }

    /**
     * @returns {string} Address generated by keys, and threshold
     */
    get address() {
        return bs58.encode(this.hash) + Hint.MC_ADDRESS;
    }

    buffer() {
        const kArr = [];
        for (var i = 0; i < this.keys.length; i++) {
            kArr.push(this.keys[i]);
        }
        const sortedKeys = kArr.sort(compare);
        const bKeys = Util.concatObjectsToBuffer(sortedKeys)

        const bThreshold = this.threshold.buffer();

        return Buffer.concat([bKeys, bThreshold]);
    }

    dict() {
        const keys = {};
        keys._hint = this.hint;
        keys.hash = bs58.encode(this.hash);

        const _keys = [];
        for (var i = 0; i < this.keys.length; i++) {
            _keys.push(
                this.keys[i].dict()
            );
        }
        keys.keys = _keys;
        keys.threshold = this.threshold.value;

        return keys;
    }

    _generateHash() {
        return Util.sum256(this.buffer());
    }
};


class Keypair {

    constructor(seed, useSeed) {
        if (!useSeed) {
            const parsed = Util.parseTyped(seed);
            const type = parsed.type;
            const key = parsed.raw;

            if (type !== Hint.PRIVATE_KEY || key.length !== 52) {
                throw '[ERROR] Not a private key!';
            }

            this.seed = null;
            this.privKey = new BaseKey(key, type);
        }
        else {
            if (seed.length < 36) {
                throw '[ERROR] Too short seed < 36 length!';
            }

            this.seed = seed;
            this.privKey = null;
        }

        this._generatePrivateKey();
        this._generatePublicKey();
    }

    /**
     * @returns {string} Typed private key
     */
    getPrivateKey() {
        return this.privKey.typed();
    }

    /**
     * @returns {string} Typed public key 
     */
    getPublicKey() {
        return this.pubKey.typed();
    }

    /**
     * @returns {string} Raw private key
     */
    getRawPrivateKey() {
        return this.privKey.key;
    }

    /**
     * @returns {string} Raw public key 
     */
    getRawPublicKey() {
        return this.pubKey.key;
    }

    /**
     * Signs the target message and returns signature digest.
     * @param {string} msg Target message to sign 
     * @returns {Buffer} Signature digest
     */
    sign(msg) {
        const _msg = Util.sha256(Util.sha256(msg));
        const sk = this.keypair.getPrivate('hex');

        return Buffer.from(ec.sign(_msg, sk, 'hex', { canonical: true }).toDER());
    }

    _generatePublicKey() {
        const _sk = bs58check.decode(this.privKey.key);
        const _decode = Buffer.from(_sk.slice(1, _sk.length - 1));

        this.keypair = ec.keyFromPrivate(_decode);
        this.pubKey = new BaseKey(bs58.encode(ecCrypto.getPublicCompressed(_decode)), Hint.PUBLIC_KEY);
    }

    _generatePrivateKey() {
        if (this.privKey) {
            return;
        }

        const sh = Util.sum256(Buffer.from(this.seed));
        const shb = Buffer.from(bs58.encode(sh));

        const genKey = (encodedSeed) => {
            encodedSeed = encodedSeed.slice(0, shb.length - 4);

            function bufToBn(buf) {
                var hex = [];
                var u8 = Uint8Array.from(buf);

                u8.forEach(function (i) {
                    var h = i.toString(16);
                    if (h.length % 2) { h = '0' + h; }
                    hex.push(h);
                });

                return BigInt('0x' + hex.join(''));
            }

            let k = bufToBn(encodedSeed);

            const N = BigInt(ec.n) - BigInt(1);
            k = k % N;

            k = k + BigInt(1);
            return Buffer.from(k.toString(16))
        };

        this.privKey = new BaseKey(encodeKey(genKey(shb)), Hint.PRIVATE_KEY);
    }
};

const encodeKey = (key) => {
    const _pk = Buffer.from(
        '80' + key + '01', 'hex');

    let _hs = Util.sha256(_pk);
    _hs = Util.sha256(_hs);

    const checksum = Buffer.from(_hs.subarray(0, 4));

    return bs58.encode(
        Buffer.concat([_pk, checksum])
    );
}

/**
 * Returns new keypair.
 * @returns {Keypair} Keypair
 */
const getNewKeypair = () => {
    return getKeypairFromPrivateKey(encodeKey(ec.genKeyPair().getPrivate('hex')) + Hint.PRIVATE_KEY);
}

/**
 * Returns new keypair from string seed.
 * The length of seed should be longer than or equal to 36.
 * @param {string} seed Seed to generate Keypair (len(seed) >= 36) 
 * @returns {Keypair} Keypair from seed
 */
const getKeypairFromSeed = (seed) => {
    return new Keypair(seed, true);
}

/**
 * Returns new keypair from private key.
 * Private key should be a mitum key with type suffix (mpr).
 * @param {string} key Key - '{wif key}mpr' 
 * @returns {Keypair} Keypair from private key
 */
const getKeypairFromPrivateKey = (key) => {
    return new Keypair(key, false);
}

module.exports = {
    Key,
    Keys,
    Keypair,
    getNewKeypair,
    getKeypairFromSeed,
    getKeypairFromPrivateKey
};